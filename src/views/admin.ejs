<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body {
            background: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .navbar-brand {
            font-weight: bold;
        }
        .card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            transition: transform 0.2s ease;
        }
        .card:hover {
            transform: translateY(-2px);
        }
        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 25px;
            padding: 10px 25px;
            font-weight: 600;
        }
        .stat-card {
            text-align: center;
            padding: 25px 20px;
            cursor: pointer;
        }
        .stat-number {
            font-size: 2.5rem;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 5px;
        }
        .stat-label {
            color: #6c757d;
            font-weight: 500;
        }
        .metric-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            text-align: center;
        }
        .system-health {
            display: flex;
            align-items: center;
            padding: 10px 15px;
            border-radius: 10px;
            margin-bottom: 10px;
        }
        .health-good { background: #d4edda; color: #155724; }
        .health-warning { background: #fff3cd; color: #856404; }
        .health-danger { background: #f8d7da; color: #721c24; }
        .table-responsive {
            border-radius: 10px;
            overflow: hidden;
        }
        .badge {
            font-size: 0.75rem;
        }
        .nav-tabs .nav-link {
            border-radius: 10px 10px 0 0;
            border: none;
            color: #6c757d;
        }
        .nav-tabs .nav-link.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        .chart-container {
            position: relative;
            height: 300px;
        }
        .refresh-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 10;
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container-fluid">
            <a class="navbar-brand" href="/admin">
                <i class="bi bi-shield-lock-fill"></i> Admin Panel - Privacy Vault
            </a>
            
            <div class="navbar-nav ms-auto">
                <div class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown">
                        <i class="bi bi-person-gear"></i> <span id="adminUsername">Admin</span>
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="/dashboard">
                            <i class="bi bi-speedometer2"></i> User Dashboard
                        </a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="#" id="logoutBtn">
                            <i class="bi bi-box-arrow-right"></i> Logout
                        </a></li>
                    </ul>
                </div>
            </div>
        </div>
    </nav>

    <div class="container-fluid py-4">
        <!-- Alert Container -->
        <div id="alertContainer"></div>

        <!-- Page Header -->
        <div class="row mb-4">
            <div class="col-md-6">
                <h2><i class="bi bi-speedometer2"></i> System Dashboard</h2>
                <p class="text-muted">Privacy-First Data Vault Administration</p>
            </div>
            <div class="col-md-6 text-end">
                <button class="btn btn-outline-primary me-2" id="refreshDataBtn">
                    <i class="bi bi-arrow-clockwise"></i> Refresh Data
                </button>
                <div class="btn-group">
                    <button class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown">
                        <i class="bi bi-tools"></i> Actions
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" data-action="cleanup-expired">
                            <i class="bi bi-trash"></i> Cleanup Expired
                        </a></li>
                        <li><a class="dropdown-item" href="#" data-action="unlock-accounts">
                            <i class="bi bi-unlock"></i> Unlock Accounts
                        </a></li>
                        <li><a class="dropdown-item" href="#" data-action="system-backup">
                            <i class="bi bi-download"></i> System Backup
                        </a></li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- System Statistics -->
        <div class="row mb-4">
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card stat-card" data-metric="users">
                    <div class="stat-number" id="totalUsers">0</div>
                    <div class="stat-label">Total Users</div>
                    <small class="text-muted" id="activeUsers">0 active</small>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card stat-card" data-metric="vaults">
                    <div class="stat-number" id="totalVaults">0</div>
                    <div class="stat-label">Data Vaults</div>
                    <small class="text-muted" id="vaultsWithData">0 with data</small>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card stat-card" data-metric="disclosures">
                    <div class="stat-number" id="totalDisclosures">0</div>
                    <div class="stat-label">Disclosures</div>
                    <small class="text-muted" id="activeDisclosures">0 active</small>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card stat-card" data-metric="security">
                    <div class="stat-number" id="securityScore">100</div>
                    <div class="stat-label">Security Score</div>
                    <small class="text-muted">System Health</small>
                </div>
            </div>
        </div>

        <!-- System Health -->
        <div class="row mb-4">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-heart-pulse"></i> System Health
                        </h5>
                        <button class="btn btn-sm btn-outline-primary refresh-btn" id="refreshHealth">
                            <i class="bi bi-arrow-clockwise"></i>
                        </button>
                    </div>
                    <div class="card-body">
                        <div id="systemHealthContainer">
                            <!-- System health items will be loaded here -->
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="card">
                    <div class="card-header">
                        <h6 class="card-title mb-0">
                            <i class="bi bi-server"></i> System Info
                        </h6>
                    </div>
                    <div class="card-body">
                        <div id="systemInfo">
                            <!-- System information will be loaded here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content Tabs -->
        <div class="card">
            <div class="card-header">
                <ul class="nav nav-tabs card-header-tabs" id="adminTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="users-tab" data-bs-toggle="tab" data-bs-target="#users-panel" type="button" role="tab">
                            <i class="bi bi-people"></i> Users
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="vaults-tab" data-bs-toggle="tab" data-bs-target="#vaults-panel" type="button" role="tab">
                            <i class="bi bi-safe"></i> Vaults
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="disclosures-tab" data-bs-toggle="tab" data-bs-target="#disclosures-panel" type="button" role="tab">
                            <i class="bi bi-share"></i> Disclosures
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="security-tab" data-bs-toggle="tab" data-bs-target="#security-panel" type="button" role="tab">
                            <i class="bi bi-shield-check"></i> Security
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="audit-tab" data-bs-toggle="tab" data-bs-target="#audit-panel" type="button" role="tab">
                            <i class="bi bi-journal-text"></i> Audit
                        </button>
                    </li>
                </ul>
            </div>
            
            <div class="card-body">
                <div class="tab-content" id="adminTabContent">
                    <!-- Users Panel -->
                    <div class="tab-pane fade show active" id="users-panel" role="tabpanel">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5>User Management</h5>
                            <div class="input-group" style="width: 300px;">
                                <input type="text" class="form-control" placeholder="Search users..." id="userSearch">
                                <button class="btn btn-outline-primary" type="button" id="searchUsersBtn">
                                    <i class="bi bi-search"></i>
                                </button>
                            </div>
                        </div>
                        
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>User</th>
                                        <th>Role</th>
                                        <th>Status</th>
                                        <th>Vault</th>
                                        <th>Created</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="usersTableBody">
                                    <tr>
                                        <td colspan="6" class="text-center">
                                            <i class="bi bi-hourglass-split"></i> Loading users...
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        
                        <!-- Pagination -->
                        <nav aria-label="Users pagination">
                            <ul class="pagination justify-content-center" id="usersPagination">
                                <!-- Pagination will be loaded here -->
                            </ul>
                        </nav>
                    </div>

                    <!-- Vaults Panel -->
                    <div class="tab-pane fade" id="vaults-panel" role="tabpanel">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5>Vault Overview</h5>
                            <small class="text-muted">Structural data only - no decrypted content</small>
                        </div>
                        
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Owner</th>
                                        <th>Categories</th>
                                        <th>Attributes</th>
                                        <th>Disclosures</th>
                                        <th>Last Updated</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="vaultsTableBody">
                                    <tr>
                                        <td colspan="6" class="text-center">
                                            <i class="bi bi-hourglass-split"></i> Loading vaults...
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Disclosures Panel -->
                    <div class="tab-pane fade" id="disclosures-panel" role="tabpanel">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5>Selective Disclosures</h5>
                            <div class="btn-group">
                                <button class="btn btn-sm btn-outline-primary" data-filter="all">All</button>
                                <button class="btn btn-sm btn-outline-warning" data-filter="pending">Pending</button>
                                <button class="btn btn-sm btn-outline-success" data-filter="verified">Verified</button>
                                <button class="btn btn-sm btn-outline-secondary" data-filter="expired">Expired</button>
                            </div>
                        </div>
                        
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Disclosure ID</th>
                                        <th>User</th>
                                        <th>Purpose</th>
                                        <th>Fields</th>
                                        <th>Status</th>
                                        <th>Created</th>
                                        <th>Expires</th>
                                    </tr>
                                </thead>
                                <tbody id="disclosuresTableBody">
                                    <tr>
                                        <td colspan="7" class="text-center">
                                            <i class="bi bi-hourglass-split"></i> Loading disclosures...
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Security Panel -->
                    <div class="tab-pane fade" id="security-panel" role="tabpanel">
                        <h5 class="mb-3">Security Overview</h5>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-header">
                                        <h6 class="mb-0">Security Alerts</h6>
                                    </div>
                                    <div class="card-body">
                                        <div id="securityAlerts">
                                            <!-- Security alerts will be loaded here -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-header">
                                        <h6 class="mb-0">Failed Login Attempts</h6>
                                    </div>
                                    <div class="card-body">
                                        <div id="failedLogins">
                                            <!-- Failed login attempts will be loaded here -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row mt-4">
                            <div class="col-12">
                                <div class="card">
                                    <div class="card-header">
                                        <h6 class="mb-0">Security Recommendations</h6>
                                    </div>
                                    <div class="card-body">
                                        <div id="securityRecommendations">
                                            <!-- Security recommendations will be loaded here -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Audit Panel -->
                    <div class="tab-pane fade" id="audit-panel" role="tabpanel">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5>Audit Log</h5>
                            <div class="input-group" style="width: 200px;">
                                <select class="form-select" id="auditFilter">
                                    <option value="">All Actions</option>
                                    <option value="create">Create</option>
                                    <option value="read">Read</option>
                                    <option value="update">Update</option>
                                    <option value="delete">Delete</option>
                                    <option value="share">Share</option>
                                    <option value="verify">Verify</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Timestamp</th>
                                        <th>User</th>
                                        <th>Action</th>
                                        <th>Field</th>
                                        <th>IP Address</th>
                                        <th>Details</th>
                                    </tr>
                                </thead>
                                <tbody id="auditTableBody">
                                    <tr>
                                        <td colspan="6" class="text-center">
                                            <i class="bi bi-hourglass-split"></i> Loading audit log...
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- User Detail Modal -->
    <div class="modal fade" id="userDetailModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-person-circle"></i> User Details
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="userDetailContent">
                    <!-- User details will be loaded here -->
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Global variables
        let currentUser = null;
        let systemStats = null;
        let refreshInterval = null;

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            initializeAdmin();
            setupEventListeners();
            loadInitialData();
            startAutoRefresh();
        });

        // Check authentication and admin role
        function initializeAdmin() {
            const token = localStorage.getItem('accessToken');
            if (!token) {
                window.location.href = '/login';
                return;
            }

            axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
        }

        // Setup event listeners
        function setupEventListeners() {
            // Logout
            document.getElementById('logoutBtn').addEventListener('click', (e) => {
                e.preventDefault();
                localStorage.removeItem('accessToken');
                localStorage.removeItem('refreshToken');
                window.location.href = '/login';
            });

            // Refresh data
            document.getElementById('refreshDataBtn').addEventListener('click', loadInitialData);
            document.getElementById('refreshHealth').addEventListener('click', loadSystemHealth);

            // Tab change events
            document.querySelectorAll('#adminTabs button').forEach(tab => {
                tab.addEventListener('shown.bs.tab', handleTabChange);
            });

            // Search and filters
            document.getElementById('searchUsersBtn').addEventListener('click', searchUsers);
            document.getElementById('userSearch').addEventListener('keypress', (e) => {
                if (e.key === 'Enter') searchUsers();
            });

            document.getElementById('auditFilter').addEventListener('change', loadAuditLog);

            // Disclosure filter buttons
            document.querySelectorAll('[data-filter]').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const filter = e.target.dataset.filter;
                    filterDisclosures(filter);
                });
            });

            // Maintenance actions
            document.querySelectorAll('[data-action]').forEach(btn => {
                btn.addEventListener('click', handleMaintenanceAction);
            });

            // Metric cards click events
            document.querySelectorAll('[data-metric]').forEach(card => {
                card.addEventListener('click', (e) => {
                    const metric = e.currentTarget.dataset.metric;
                    focusOnMetric(metric);
                });
            });
        }

        // Load initial data
        async function loadInitialData() {
            showLoading('Loading admin dashboard...');
            
            try {
                await Promise.all([
                    loadUserProfile(),
                    loadSystemStats(),
                    loadSystemHealth(),
                    loadUsers(),
                    loadVaults(),
                    loadDisclosures(),
                    loadAuditLog()
                ]);
                
                hideLoading();
            } catch (error) {
                hideLoading();
                showAlert('Failed to load admin data', 'danger');
                console.error('Admin data loading error:', error);
            }
        }

        // Load user profile
        async function loadUserProfile() {
            try {
                const response = await axios.get('/api/auth/me');
                currentUser = response.data.data.user;
                
                if (currentUser.role !== 'admin') {
                    showAlert('Access denied. Admin privileges required.', 'danger');
                    setTimeout(() => {
                        window.location.href = '/dashboard';
                    }, 3000);
                    return;
                }
                
                document.getElementById('adminUsername').textContent = currentUser.username;
            } catch (error) {
                showAlert('Failed to load user profile', 'warning');
            }
        }

        // Load system statistics
        async function loadSystemStats() {
            try {
                const response = await axios.get('/api/admin/stats');
                systemStats = response.data.data.stats;
                
                // Update stat cards
                document.getElementById('totalUsers').textContent = systemStats.users.total;
                document.getElementById('activeUsers').textContent = `${systemStats.users.active} active`;
                document.getElementById('totalVaults').textContent = systemStats.vaults.total;
                document.getElementById('vaultsWithData').textContent = `${systemStats.vaults.withData} with data`;
                document.getElementById('totalDisclosures').textContent = systemStats.disclosures.total;
                document.getElementById('activeDisclosures').textContent = `${systemStats.disclosures.active} active`;
                
                // Calculate security score
                const securityScore = calculateSecurityScore();
                document.getElementById('securityScore').textContent = securityScore;
                
                // Update system info
                updateSystemInfo();
                
            } catch (error) {
                console.error('Failed to load system stats:', error);
            }
        }

        // Load system health
        async function loadSystemHealth() {
            const healthContainer = document.getElementById('systemHealthContainer');
            
            const healthItems = [
                {
                    name: 'Database Connection',
                    status: 'good',
                    message: 'Connected and responding'
                },
                {
                    name: 'Memory Usage',
                    status: systemStats?.system.memory.used > 500 ? 'warning' : 'good',
                    message: `${systemStats?.system.memory.used || 0} MB used`
                },
                {
                    name: 'Disk Space',
                    status: 'good',
                    message: 'Sufficient space available'
                },
                {
                    name: 'API Response Time',
                    status: 'good',
                    message: '< 100ms average'
                },
                {
                    name: 'Failed Logins (24h)',
                    status: systemStats?.users.inactive > 10 ? 'warning' : 'good',
                    message: `${systemStats?.users.inactive || 0} failed attempts`
                }
            ];
            
            let html = '';
            healthItems.forEach(item => {
                html += `
                    <div class="system-health health-${item.status}">
                        <i class="bi bi-${getHealthIcon(item.status)} me-2"></i>
                        <strong>${item.name}:</strong> ${item.message}
                    </div>
                `;
            });
            
            healthContainer.innerHTML = html;
        }

        // Load users
        async function loadUsers(page = 1, search = '') {
            try {
                const response = await axios.get('/api/admin/users', {
                    params: { page, limit: 10, search }
                });
                
                const { users, pagination } = response.data.data;
                const tbody = document.getElementById('usersTableBody');
                
                if (users.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="6" class="text-center">No users found</td></tr>';
                    return;
                }
                
                let html = '';
                users.forEach(user => {
                    html += `
                        <tr>
                            <td>
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-person-circle fs-4 me-2 text-muted"></i>
                                    <div>
                                        <div class="fw-bold">${user.username}</div>
                                        <small class="text-muted">${user.email}</small>
                                    </div>
                                </div>
                            </td>
                            <td><span class="badge bg-${getRoleBadgeColor(user.role)}">${user.role}</span></td>
                            <td><span class="badge bg-${user.isActive ? 'success' : 'secondary'}">${user.isActive ? 'Active' : 'Inactive'}</span></td>
                            <td>
                                ${user.vaultStats ? `${user.vaultStats.totalAttributes} attrs, ${user.vaultStats.totalDisclosures} disclosures` : 'No vault'}
                            </td>
                            <td>${formatDate(user.createdAt)}</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary" onclick="viewUserDetails('${user._id}')">
                                    <i class="bi bi-eye"></i>
                                </button>
                            </td>
                        </tr>
                    `;
                });
                
                tbody.innerHTML = html;
                updatePagination('usersPagination', pagination, loadUsers);
                
            } catch (error) {
                document.getElementById('usersTableBody').innerHTML = 
                    '<tr><td colspan="6" class="text-center text-danger">Failed to load users</td></tr>';
            }
        }

        // Load vaults
        async function loadVaults(page = 1) {
            try {
                const response = await axios.get('/api/admin/vaults', {
                    params: { page, limit: 10 }
                });
                
                const { vaults } = response.data.data;
                const tbody = document.getElementById('vaultsTableBody');
                
                if (vaults.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="6" class="text-center">No vaults found</td></tr>';
                    return;
                }
                
                let html = '';
                vaults.forEach(vault => {
                    html += `
                        <tr>
                            <td>
                                <div class="fw-bold">${vault.userId.username}</div>
                                <small class="text-muted">${vault.userId.email}</small>
                            </td>
                            <td>
                                ${vault.stats.categories.map(cat => `<span class="badge bg-secondary me-1">${cat}</span>`).join('')}
                            </td>
                            <td><span class="badge bg-primary">${vault.stats.totalAttributes}</span></td>
                            <td>
                                <span class="badge bg-success">${vault.stats.disclosures.active}</span>
                                <span class="badge bg-secondary">${vault.stats.disclosures.total}</span>
                            </td>
                            <td>${formatDate(vault.updatedAt)}</td>
                            <td>
                                <button class="btn btn-sm btn-outline-info" onclick="viewVaultStats('${vault._id}')">
                                    <i class="bi bi-bar-chart"></i>
                                </button>
                            </td>
                        </tr>
                    `;
                });
                
                tbody.innerHTML = html;
                
            } catch (error) {
                document.getElementById('vaultsTableBody').innerHTML = 
                    '<tr><td colspan="6" class="text-center text-danger">Failed to load vaults</td></tr>';
            }
        }

        // Load disclosures
        async function loadDisclosures(status = '') {
            try {
                const response = await axios.get('/api/admin/disclosures', {
                    params: { limit: 20, status }
                });
                
                const { disclosures } = response.data.data;
                const tbody = document.getElementById('disclosuresTableBody');
                
                if (disclosures.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="7" class="text-center">No disclosures found</td></tr>';
                    return;
                }
                
                let html = '';
                disclosures.forEach(disclosure => {
                    html += `
                        <tr>
                            <td><code>${disclosure.disclosureId.substring(0, 8)}...</code></td>
                            <td>${disclosure.user.username}</td>
                            <td>${disclosure.purpose}</td>
                            <td><span class="badge bg-info">${disclosure.disclosedFields.length}</span></td>
                            <td><span class="badge bg-${getStatusBadgeColor(disclosure.verificationStatus)}">${disclosure.verificationStatus}</span></td>
                            <td>${formatDate(disclosure.createdAt)}</td>
                            <td>${disclosure.expiresAt ? formatDate(disclosure.expiresAt) : 'Never'}</td>
                        </tr>
                    `;
                });
                
                tbody.innerHTML = html;
                
            } catch (error) {
                document.getElementById('disclosuresTableBody').innerHTML = 
                    '<tr><td colspan="7" class="text-center text-danger">Failed to load disclosures</td></tr>';
            }
        }

        // Load audit log
        async function loadAuditLog() {
            try {
                const action = document.getElementById('auditFilter').value;
                const response = await axios.get('/api/admin/audit', {
                    params: { limit: 20, action }
                });
                
                const { auditLogs } = response.data.data;
                const tbody = document.getElementById('auditTableBody');
                
                if (auditLogs.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="6" class="text-center">No audit logs found</td></tr>';
                    return;
                }
                
                let html = '';
                auditLogs.forEach(log => {
                    html += `
                        <tr>
                            <td>${formatDateTime(log.timestamp)}</td>
                            <td>${log.user.username}</td>
                            <td><span class="badge bg-${getActionBadgeColor(log.action)}">${log.action}</span></td>
                            <td>${log.field || '-'}</td>
                            <td><code>${log.ipAddress || '-'}</code></td>
                            <td>${JSON.stringify(log.details || {})}</td>
                        </tr>
                    `;
                });
                
                tbody.innerHTML = html;
                
            } catch (error) {
                document.getElementById('auditTableBody').innerHTML = 
                    '<tr><td colspan="6" class="text-center text-danger">Failed to load audit log</td></tr>';
            }
        }

        // Handle tab changes
        function handleTabChange(event) {
            const tabId = event.target.id;
            
            switch (tabId) {
                case 'users-tab':
                    loadUsers();
                    break;
                case 'vaults-tab':
                    loadVaults();
                    break;
                case 'disclosures-tab':
                    loadDisclosures();
                    break;
                case 'security-tab':
                    loadSecurityOverview();
                    break;
                case 'audit-tab':
                    loadAuditLog();
                    break;
            }
        }

        // Load security overview
        async function loadSecurityOverview() {
            try {
                const response = await axios.get('/api/admin/security');
                const security = response.data.data;
                
                // Security alerts
                const alertsContainer = document.getElementById('securityAlerts');
                if (security.alerts && Object.values(security.alerts).some(val => val > 0)) {
                    let alertsHtml = '';
                    if (security.alerts.lockedAccounts > 0) {
                        alertsHtml += `<div class="alert alert-warning">⚠️ ${security.alerts.lockedAccounts} locked accounts</div>`;
                    }
                    if (security.alerts.failedLogins > 5) {
                        alertsHtml += `<div class="alert alert-danger">🚨 ${security.alerts.failedLogins} failed logins</div>`;
                    }
                    alertsContainer.innerHTML = alertsHtml || '<p class="text-success">✅ No security alerts</p>';
                } else {
                    alertsContainer.innerHTML = '<p class="text-success">✅ No security alerts</p>';
                }
                
                // Recommendations
                const recommendationsContainer = document.getElementById('securityRecommendations');
                if (security.recommendations && security.recommendations.length > 0) {
                    let recHtml = '<ul>';
                    security.recommendations.forEach(rec => {
                        recHtml += `<li>${rec}</li>`;
                    });
                    recHtml += '</ul>';
                    recommendationsContainer.innerHTML = recHtml;
                } else {
                    recommendationsContainer.innerHTML = '<p class="text-success">✅ No recommendations at this time</p>';
                }
                
            } catch (error) {
                document.getElementById('securityAlerts').innerHTML = '<p class="text-danger">Failed to load security data</p>';
            }
        }

        // Utility functions
        function showAlert(message, type = 'info') {
            const alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            document.getElementById('alertContainer').innerHTML = alertHtml;
            
            setTimeout(() => {
                const alert = document.querySelector('.alert');
                if (alert) {
                    bootstrap.Alert.getOrCreateInstance(alert).close();
                }
            }, 5000);
        }

        function showLoading(message) {
            showAlert(`<i class="bi bi-hourglass-split"></i> ${message}`, 'info');
        }

        function hideLoading() {
            const alert = document.querySelector('.alert');
            if (alert) {
                bootstrap.Alert.getOrCreateInstance(alert).close();
            }
        }

        function formatDate(dateString) {
            return new Date(dateString).toLocaleDateString();
        }

        function formatDateTime(dateString) {
            return new Date(dateString).toLocaleString();
        }

        function getRoleBadgeColor(role) {
            return role === 'admin' ? 'danger' : 'primary';
        }

        function getStatusBadgeColor(status) {
            const colors = {
                pending: 'warning',
                verified: 'success',
                expired: 'secondary',
                revoked: 'danger'
            };
            return colors[status] || 'secondary';
        }

        function getActionBadgeColor(action) {
            const colors = {
                create: 'success',
                read: 'info',
                update: 'warning',
                delete: 'danger',
                share: 'primary',
                verify: 'secondary'
            };
            return colors[action] || 'secondary';
        }

        function getHealthIcon(status) {
            const icons = {
                good: 'check-circle-fill',
                warning: 'exclamation-triangle-fill',
                danger: 'x-circle-fill'
            };
            return icons[status] || 'question-circle';
        }

        function calculateSecurityScore() {
            if (!systemStats) return 100;
            
            let score = 100;
            
            // Deduct points for security issues
            if (systemStats.users.inactive > 10) score -= 10;
            if (systemStats.disclosures.inactive > systemStats.disclosures.total * 0.3) score -= 5;
            
            return Math.max(score, 0);
        }

        function updateSystemInfo() {
            if (!systemStats) return;
            
            document.getElementById('systemInfo').innerHTML = `
                <div class="mb-2">
                    <strong>Uptime:</strong> ${systemStats.system.uptimeFormatted}
                </div>
                <div class="mb-2">
                    <strong>Memory:</strong> ${systemStats.system.memory.used}MB / ${systemStats.system.memory.total}MB
                </div>
                <div class="mb-2">
                    <strong>Node.js:</strong> ${systemStats.system.nodeVersion}
                </div>
                <div class="mb-2">
                    <strong>Platform:</strong> ${systemStats.system.platform}
                </div>
                <div>
                    <strong>PID:</strong> ${systemStats.system.pid}
                </div>
            `;
        }

        // Search users
        function searchUsers() {
            const search = document.getElementById('userSearch').value;
            loadUsers(1, search);
        }

        // Filter disclosures
        function filterDisclosures(status) {
            // Update active button
            document.querySelectorAll('[data-filter]').forEach(btn => {
                btn.classList.remove('active');
            });
            document.querySelector(`[data-filter="${status}"]`).classList.add('active');
            
            loadDisclosures(status === 'all' ? '' : status);
        }

        // Handle maintenance actions
        async function handleMaintenanceAction(e) {
            e.preventDefault();
            const action = e.target.dataset.action;
            
            if (confirm(`Are you sure you want to perform: ${action}?`)) {
                try {
                    await axios.post('/api/admin/maintenance', { task: action });
                    showAlert('Maintenance task completed successfully', 'success');
                    loadSystemStats();
                } catch (error) {
                    showAlert('Maintenance task failed', 'danger');
                }
            }
        }

        // Focus on specific metric
        function focusOnMetric(metric) {
            const tabs = {
                users: 'users-tab',
                vaults: 'vaults-tab',
                disclosures: 'disclosures-tab',
                security: 'security-tab'
            };
            
            if (tabs[metric]) {
                const tab = new bootstrap.Tab(document.getElementById(tabs[metric]));
                tab.show();
            }
        }

        // Auto-refresh every 30 seconds
        function startAutoRefresh() {
            refreshInterval = setInterval(() => {
                loadSystemStats();
                loadSystemHealth();
            }, 30000);
        }

        // View user details
        async function viewUserDetails(userId) {
            try {
                const response = await axios.get(`/api/admin/users/${userId}`);
                const user = response.data.data.user;
                
                document.getElementById('userDetailContent').innerHTML = `
                    <div class="row">
                        <div class="col-md-6">
                            <h6>User Information</h6>
                            <p><strong>Username:</strong> ${user.username}</p>
                            <p><strong>Email:</strong> ${user.email}</p>
                            <p><strong>Role:</strong> ${user.role}</p>
                            <p><strong>Status:</strong> ${user.isActive ? 'Active' : 'Inactive'}</p>
                            <p><strong>Verified:</strong> ${user.isVerified ? 'Yes' : 'No'}</p>
                            <p><strong>Created:</strong> ${formatDateTime(user.createdAt)}</p>
                        </div>
                        <div class="col-md-6">
                            <h6>Vault Statistics</h6>
                            ${user.vaultStats ? `
                                <p><strong>Total Attributes:</strong> ${user.vaultStats.totalAttributes}</p>
                                <p><strong>Categories:</strong> ${user.vaultStats.categories.length}</p>
                                <p><strong>Disclosures:</strong> ${user.vaultStats.totalDisclosures}</p>
                                <p><strong>Active Disclosures:</strong> ${user.vaultStats.activeDisclosures}</p>
                            ` : '<p>No vault data</p>'}
                        </div>
                    </div>
                `;
                
                new bootstrap.Modal(document.getElementById('userDetailModal')).show();
                
            } catch (error) {
                showAlert('Failed to load user details', 'danger');
            }
        }

        // Update pagination
        function updatePagination(containerId, pagination, loadFunction) {
            const container = document.getElementById(containerId);
            if (!pagination || pagination.totalPages <= 1) {
                container.innerHTML = '';
                return;
            }
            
            let html = '';
            
            // Previous button
            html += `
                <li class="page-item ${pagination.currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="event.preventDefault(); ${loadFunction.name}(${pagination.currentPage - 1})">Previous</a>
                </li>
            `;
            
            // Page numbers
            for (let i = 1; i <= pagination.totalPages; i++) {
                if (i === pagination.currentPage || 
                    i === 1 || 
                    i === pagination.totalPages || 
                    (i >= pagination.currentPage - 2 && i <= pagination.currentPage + 2)) {
                    html += `
                        <li class="page-item ${i === pagination.currentPage ? 'active' : ''}">
                            <a class="page-link" href="#" onclick="event.preventDefault(); ${loadFunction.name}(${i})">${i}</a>
                        </li>
                    `;
                } else if (i === pagination.currentPage - 3 || i === pagination.currentPage + 3) {
                    html += '<li class="page-item disabled"><span class="page-link">...</span></li>';
                }
            }
            
            // Next button
            html += `
                <li class="page-item ${pagination.currentPage === pagination.totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="event.preventDefault(); ${loadFunction.name}(${pagination.currentPage + 1})">Next</a>
                </li>
            `;
            
            container.innerHTML = html;
        }

        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
            if (refreshInterval) {
                clearInterval(refreshInterval);
            }
        });
    </script>
</body>
</html>