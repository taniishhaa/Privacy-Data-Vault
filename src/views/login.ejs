<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .card {
            border: none;
            border-radius: 20px;
            box-shadow: 0 15px 35px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
            background: rgba(255,255,255,0.95);
        }
        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 25px;
            padding: 12px 30px;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        .form-control {
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 15px 20px;
            transition: all 0.3s ease;
        }
        .form-control:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }
        .otp-section {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border: 2px dashed #667eea;
            border-radius: 15px;
            padding: 20px;
            text-align: center;
            display: none;
        }
        .otp-input {
            font-size: 24px;
            text-align: center;
            letter-spacing: 5px;
            font-weight: bold;
        }
        .password-strength {
            margin-top: 10px;
        }
        .strength-bar {
            height: 4px;
            border-radius: 2px;
            transition: all 0.3s ease;
        }
        .strength-weak { background: #dc3545; width: 33%; }
        .strength-medium { background: #ffc107; width: 66%; }
        .strength-strong { background: #28a745; width: 100%; }
    </style>
</head>
<body>
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-4">
                <div class="text-center mb-4">
                    <h1 class="text-white mb-3">
                        <i class="bi bi-shield-lock-fill"></i> Privacy-First Data Vault
                    </h1>
                    <p class="text-white-50">Secure access to your encrypted vault</p>
                </div>
                
                <div class="card">
                    <div class="card-body p-4">
                        <h3 class="card-title text-center mb-4">Welcome Back</h3>
                        
                        <div id="alert-container"></div>
                        
                        <!-- Login Form -->
                        <div id="loginForm">
                            <form id="loginFormElement">
                                <div class="mb-3">
                                    <label for="email" class="form-label">Email Address</label>
                                    <input type="email" class="form-control" id="email" required 
                                           placeholder="Enter your email">
                                </div>
                                
                                <div class="mb-4">
                                    <label for="password" class="form-label">Password</label>
                                    <div class="position-relative">
                                        <input type="password" class="form-control" id="password" required 
                                               placeholder="Enter your password">
                                        <button type="button" class="btn btn-outline-secondary position-absolute top-50 end-0 translate-middle-y me-2" 
                                                id="togglePassword" style="border: none; background: none;">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                    </div>
                                </div>
                                
                                <div class="mb-3 form-check">
                                    <input type="checkbox" class="form-check-input" id="rememberMe">
                                    <label class="form-check-label" for="rememberMe">
                                        Remember me
                                    </label>
                                </div>
                                
                                <button type="submit" class="btn btn-primary w-100 mb-3">
                                    <i class="bi bi-box-arrow-in-right"></i> Login
                                </button>
                            </form>
                        </div>
                        
                        <!-- 2FA OTP Section -->
                        <div id="otpSection" class="otp-section">
                            <h5 class="mb-3">
                                <i class="bi bi-shield-check"></i> Two-Factor Authentication
                            </h5>
                            <p class="text-muted mb-3">Enter the 6-digit verification code sent to your email</p>
                            
                            <form id="otpForm">
                                <div class="mb-3">
                                    <input type="text" class="form-control otp-input" id="otpCode" 
                                           maxlength="6" placeholder="000000" required>
                                    <small class="text-muted">Code expires in 5 minutes</small>
                                </div>
                                
                                <div class="d-flex justify-content-between">
                                    <button type="button" class="btn btn-outline-secondary" id="resendOTP">
                                        <i class="bi bi-arrow-clockwise"></i> Resend Code
                                    </button>
                                    <button type="submit" class="btn btn-success">
                                        <i class="bi bi-check-circle"></i> Verify
                                    </button>
                                </div>
                            </form>
                        </div>
                        
                        <!-- Forgot Password Form -->
                        <div id="forgotPasswordForm" style="display: none;">
                            <h5 class="text-center mb-3">Reset Password</h5>
                            <form id="forgotPasswordFormElement">
                                <div class="mb-3">
                                    <label for="resetEmail" class="form-label">Email Address</label>
                                    <input type="email" class="form-control" id="resetEmail" required 
                                           placeholder="Enter your email">
                                </div>
                                
                                <button type="submit" class="btn btn-warning w-100 mb-3">
                                    <i class="bi bi-envelope"></i> Send Reset Link
                                </button>
                                
                                <button type="button" class="btn btn-outline-secondary w-100" id="backToLogin">
                                    <i class="bi bi-arrow-left"></i> Back to Login
                                </button>
                            </form>
                        </div>
                        
                        <div class="text-center mt-3" id="loginActions">
                            <p class="mb-2">
                                <a href="#" class="text-decoration-none" id="forgotPasswordLink">Forgot your password?</a>
                            </p>
                            <p class="mb-0">Don't have an account? <a href="/" class="text-decoration-none">Sign up here</a></p>
                        </div>
                    </div>
                </div>
                
                <div class="text-center mt-4">
                    <small class="text-white-50">
                        <i class="bi bi-shield-check"></i> Your data is encrypted with your password
                    </small>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        let currentEmail = '';
        let loginAttempts = 0;
        const maxAttempts = 5;
        
        function showAlert(message, type = 'danger') {
            const alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    <i class="bi bi-${getAlertIcon(type)}"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            document.getElementById('alert-container').innerHTML = alertHtml;
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                const alert = document.querySelector('.alert');
                if (alert) {
                    bootstrap.Alert.getOrCreateInstance(alert).close();
                }
            }, 5000);
        }

        function getAlertIcon(type) {
            const icons = {
                success: 'check-circle',
                danger: 'exclamation-triangle',
                warning: 'exclamation-triangle',
                info: 'info-circle'
            };
            return icons[type] || 'info-circle';
        }

        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
            const passwordField = document.getElementById('password');
            const icon = this.querySelector('i');
            
            if (passwordField.type === 'password') {
                passwordField.type = 'text';
                icon.classList.replace('bi-eye', 'bi-eye-slash');
            } else {
                passwordField.type = 'password';
                icon.classList.replace('bi-eye-slash', 'bi-eye');
            }
        });

        // Main login form submission
        document.getElementById('loginFormElement').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            
            if (loginAttempts >= maxAttempts) {
                showAlert('Too many failed attempts. Please try again later.');
                return;
            }
            
            // Show loading state
            const submitBtn = document.querySelector('#loginFormElement button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Logging in...';
            submitBtn.disabled = true;
            
            try {
                const response = await axios.post('/api/auth/login', {
                    email,
                    password
                });
                
                currentEmail = email;
                
                // Check if 2FA is required
                if (response.data.requiresOTP) {
                    // Show OTP section
                    document.getElementById('loginForm').style.display = 'none';
                    document.getElementById('otpSection').style.display = 'block';
                    document.getElementById('loginActions').style.display = 'none';
                    
                    showAlert(`Verification code sent to ${response.data.email}`, 'info');
                    
                    // Focus on OTP input
                    document.getElementById('otpCode').focus();
                } else {
                    // Direct login success
                    localStorage.setItem('accessToken', response.data.data.accessToken);
                    localStorage.setItem('refreshToken', response.data.data.refreshToken);
                    
                    showAlert('Login successful! Redirecting...', 'success');
                    
                    setTimeout(() => {
                        window.location.href = '/dashboard';
                    }, 1500);
                }
                
                loginAttempts = 0; // Reset attempts on successful login
                
            } catch (error) {
                loginAttempts++;
                const message = error.response?.data?.error?.message || 
                               error.response?.data?.message || 
                               'Login failed';
                showAlert(message);
                
                if (loginAttempts >= maxAttempts) {
                    showAlert('Maximum login attempts reached. Please try again later.', 'warning');
                    submitBtn.style.display = 'none';
                }
            } finally {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        });

        // OTP form submission
        document.getElementById('otpForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const otp = document.getElementById('otpCode').value;
            
            if (!otp || otp.length !== 6) {
                showAlert('Please enter a valid 6-digit code');
                return;
            }
            
            const submitBtn = document.querySelector('#otpForm button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Verifying...';
            submitBtn.disabled = true;
            
            try {
                const response = await axios.post('/api/auth/verify-otp', {
                    email: currentEmail,
                    otp: otp
                });
                
                // Store tokens
                localStorage.setItem('accessToken', response.data.data.accessToken);
                localStorage.setItem('refreshToken', response.data.data.refreshToken);
                
                showAlert('Login successful! Redirecting...', 'success');
                
                setTimeout(() => {
                    window.location.href = '/dashboard';
                }, 1500);
                
            } catch (error) {
                const message = error.response?.data?.error?.message || 
                               error.response?.data?.message || 
                               'Invalid verification code';
                showAlert(message);
                
                // Clear OTP input
                document.getElementById('otpCode').value = '';
                document.getElementById('otpCode').focus();
            } finally {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        });

        // Resend OTP
        document.getElementById('resendOTP').addEventListener('click', async () => {
            const btn = document.getElementById('resendOTP');
            const originalText = btn.innerHTML;
            btn.innerHTML = '<i class="bi bi-hourglass-split"></i> Sending...';
            btn.disabled = true;
            
            try {
                const email = currentEmail;
                const password = document.getElementById('password').value;
                
                await axios.post('/api/auth/login', { email, password });
                showAlert('New verification code sent!', 'info');
                
                // Start countdown
                let countdown = 30;
                const interval = setInterval(() => {
                    btn.innerHTML = `<i class="bi bi-hourglass-split"></i> Wait ${countdown}s`;
                    countdown--;
                    
                    if (countdown < 0) {
                        clearInterval(interval);
                        btn.innerHTML = originalText;
                        btn.disabled = false;
                    }
                }, 1000);
                
            } catch (error) {
                showAlert('Failed to resend verification code', 'warning');
                btn.innerHTML = originalText;
                btn.disabled = false;
            }
        });

        // Auto-format OTP input
        document.getElementById('otpCode').addEventListener('input', function(e) {
            this.value = this.value.replace(/\D/g, '').slice(0, 6);
            
            // Auto-submit when 6 digits entered
            if (this.value.length === 6) {
                setTimeout(() => {
                    document.getElementById('otpForm').dispatchEvent(new Event('submit'));
                }, 500);
            }
        });

        // Forgot password functionality
        document.getElementById('forgotPasswordLink').addEventListener('click', (e) => {
            e.preventDefault();
            document.getElementById('loginForm').style.display = 'none';
            document.getElementById('forgotPasswordForm').style.display = 'block';
            document.getElementById('loginActions').style.display = 'none';
            document.getElementById('resetEmail').focus();
        });

        // Back to login
        document.getElementById('backToLogin').addEventListener('click', () => {
            document.getElementById('loginForm').style.display = 'block';
            document.getElementById('forgotPasswordForm').style.display = 'none';
            document.getElementById('loginActions').style.display = 'block';
            document.getElementById('otpSection').style.display = 'none';
        });

        // Forgot password form submission
        document.getElementById('forgotPasswordFormElement').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const email = document.getElementById('resetEmail').value;
            
            const submitBtn = document.querySelector('#forgotPasswordFormElement button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Sending...';
            submitBtn.disabled = true;
            
            try {
                await axios.post('/api/auth/forgot-password', { email });
                showAlert('Password reset link sent to your email!', 'success');
                
                setTimeout(() => {
                    document.getElementById('backToLogin').click();
                }, 2000);
                
            } catch (error) {
                const message = error.response?.data?.error?.message || 'Failed to send reset email';
                showAlert(message);
            } finally {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        });

        // Check if user is already logged in
        window.addEventListener('load', () => {
            const token = localStorage.getItem('accessToken');
            if (token) {
                // User might already be logged in, redirect to dashboard
                window.location.href = '/dashboard';
            }
        });

        // Handle URL parameters (for password reset)
        const urlParams = new URLSearchParams(window.location.search);
        const resetToken = urlParams.get('token');
        
        if (resetToken) {
            // Handle password reset token
            showAlert('Please enter your new password', 'info');
            // You can implement password reset form here
        }
    </script>
</body>
</html>